create schema if not exists "daily_scrum";

create type "daily_scrum"."role" as enum ('member', 'admin', 'owner');

create table "daily_scrum"."daily_scrum_update_answers" (
  "id" bigint generated by default as identity not null,
  "created_at" timestamp with time zone not null default now(),
  "daily_scrum_update_entry_id" bigint not null,
  "daily_scrum_update_question_id" bigint not null,
  "answer" text not null default '' :: text
);

alter table
  "daily_scrum"."daily_scrum_update_answers" enable row level security;

create table "daily_scrum"."daily_scrum_update_entries" (
  "id" bigint generated by default as identity not null,
  "created_at" timestamp with time zone not null default now(),
  "daily_scrum_update_form_id" bigint not null,
  "submitted_user_id" uuid not null,
  "time_zone" text not null default '' :: text,
  "date" timestamp with time zone not null
);

alter table
  "daily_scrum"."daily_scrum_update_entries" enable row level security;

create table "daily_scrum"."daily_scrum_update_forms" (
  "id" bigint generated by default as identity not null,
  "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc' :: text),
  "description" text not null default '' :: text,
  "workspace_id" bigint not null
);

alter table
  "daily_scrum"."daily_scrum_update_forms" enable row level security;

create table "daily_scrum"."daily_scrum_update_questions" (
  "daily_scrum_update_form_id" bigint not null,
  "question" text not null,
  "brief_question" text not null,
  "placeholder" text,
  "description" text,
  "is_required" boolean not null,
  "max_length" integer,
  "order" integer not null,
  "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc' :: text),
  "id" bigint generated by default as identity not null
);

alter table
  "daily_scrum"."daily_scrum_update_questions" enable row level security;

create table "daily_scrum"."invitations" (
  "id" bigint generated by default as identity not null,
  "created_at" timestamp with time zone not null default now(),
  "workspace_id" bigint not null,
  "code" uuid not null default gen_random_uuid()
);

alter table
  "daily_scrum"."invitations" enable row level security;

create table "daily_scrum"."members" (
  "id" bigint generated by default as identity not null,
  "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc' :: text),
  "updated_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc' :: text),
  "user_id" uuid not null,
  "workspace_id" bigint not null,
  "role" daily_scrum.role not null default 'member' :: daily_scrum.role
);

alter table
  "daily_scrum"."members" enable row level security;

create table "daily_scrum"."profiles" (
  "id" uuid not null,
  "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc' :: text),
  "update_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc' :: text),
  "name" text not null default '' :: text,
  "display_name" text not null default '' :: text
);

alter table
  "daily_scrum"."profiles" enable row level security;

create table "daily_scrum"."workspace_settings" (
  "id" bigint generated by default as identity not null,
  "created_at" timestamp with time zone not null default now(),
  "workspace_id" bigint not null,
  "attribute_key" text not null default '' :: text,
  "attribute_value" text not null default '' :: text
);

alter table
  "daily_scrum"."workspace_settings" enable row level security;

create table "daily_scrum"."workspaces" (
  "id" bigint generated by default as identity not null,
  "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc' :: text),
  "updated_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc' :: text),
  "name" text not null default '' :: text,
  "hash_id" text not null default '' :: text
);

alter table
  "daily_scrum"."workspaces" enable row level security;

CREATE UNIQUE INDEX daily_scrum_update_answers_pkey ON daily_scrum.daily_scrum_update_answers USING btree (id);

CREATE UNIQUE INDEX daily_scrum_update_entries_pkey ON daily_scrum.daily_scrum_update_entries USING btree (id);

CREATE UNIQUE INDEX daily_scrum_update_questions_pkey ON daily_scrum.daily_scrum_update_questions USING btree (id);

CREATE UNIQUE INDEX invitations_code_key ON daily_scrum.invitations USING btree (code);

CREATE UNIQUE INDEX invitations_pkey ON daily_scrum.invitations USING btree (id);

CREATE UNIQUE INDEX members_pkey ON daily_scrum.members USING btree (id, user_id);

CREATE UNIQUE INDEX "organizationSettings_pkey" ON daily_scrum.workspace_settings USING btree (id);

CREATE UNIQUE INDEX organization_daily_scrum_update_pkey ON daily_scrum.daily_scrum_update_forms USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON daily_scrum.profiles USING btree (id);

CREATE UNIQUE INDEX teams_pkey ON daily_scrum.workspaces USING btree (id);

alter table
  "daily_scrum"."daily_scrum_update_answers"
add
  constraint "daily_scrum_update_answers_pkey" PRIMARY KEY using index "daily_scrum_update_answers_pkey";

alter table
  "daily_scrum"."daily_scrum_update_entries"
add
  constraint "daily_scrum_update_entries_pkey" PRIMARY KEY using index "daily_scrum_update_entries_pkey";

alter table
  "daily_scrum"."daily_scrum_update_forms"
add
  constraint "organization_daily_scrum_update_pkey" PRIMARY KEY using index "organization_daily_scrum_update_pkey";

alter table
  "daily_scrum"."daily_scrum_update_questions"
add
  constraint "daily_scrum_update_questions_pkey" PRIMARY KEY using index "daily_scrum_update_questions_pkey";

alter table
  "daily_scrum"."invitations"
add
  constraint "invitations_pkey" PRIMARY KEY using index "invitations_pkey";

alter table
  "daily_scrum"."members"
add
  constraint "members_pkey" PRIMARY KEY using index "members_pkey";

alter table
  "daily_scrum"."profiles"
add
  constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table
  "daily_scrum"."workspace_settings"
add
  constraint "organizationSettings_pkey" PRIMARY KEY using index "organizationSettings_pkey";

alter table
  "daily_scrum"."workspaces"
add
  constraint "teams_pkey" PRIMARY KEY using index "teams_pkey";

alter table
  "daily_scrum"."daily_scrum_update_answers"
add
  constraint "daily_scrum_daily_scrum_update_answers_daily_scrum_update_entry" FOREIGN KEY (daily_scrum_update_entry_id) REFERENCES daily_scrum.daily_scrum_update_entries(id) ON UPDATE RESTRICT ON DELETE RESTRICT not valid;

alter table
  "daily_scrum"."daily_scrum_update_answers" validate constraint "daily_scrum_daily_scrum_update_answers_daily_scrum_update_entry";

alter table
  "daily_scrum"."daily_scrum_update_answers"
add
  constraint "daily_scrum_daily_scrum_update_answers_daily_scrum_update_quest" FOREIGN KEY (daily_scrum_update_question_id) REFERENCES daily_scrum.daily_scrum_update_questions(id) ON UPDATE RESTRICT ON DELETE RESTRICT not valid;

alter table
  "daily_scrum"."daily_scrum_update_answers" validate constraint "daily_scrum_daily_scrum_update_answers_daily_scrum_update_quest";

alter table
  "daily_scrum"."daily_scrum_update_entries"
add
  constraint "daily_scrum_daily_scrum_update_entries_daily_scrum_update_form_" FOREIGN KEY (daily_scrum_update_form_id) REFERENCES daily_scrum.daily_scrum_update_forms(id) ON UPDATE RESTRICT ON DELETE RESTRICT not valid;

alter table
  "daily_scrum"."daily_scrum_update_entries" validate constraint "daily_scrum_daily_scrum_update_entries_daily_scrum_update_form_";

alter table
  "daily_scrum"."daily_scrum_update_entries"
add
  constraint "daily_scrum_daily_scrum_update_entries_submitted_user_id_fkey" FOREIGN KEY (submitted_user_id) REFERENCES daily_scrum.profiles(id) ON UPDATE RESTRICT ON DELETE RESTRICT not valid;

alter table
  "daily_scrum"."daily_scrum_update_entries" validate constraint "daily_scrum_daily_scrum_update_entries_submitted_user_id_fkey";

alter table
  "daily_scrum"."daily_scrum_update_entries"
add
  constraint "daily_scrum_update_entries_submitted_user_id_fkey" FOREIGN KEY (submitted_user_id) REFERENCES auth.users(id) not valid;

alter table
  "daily_scrum"."daily_scrum_update_entries" validate constraint "daily_scrum_update_entries_submitted_user_id_fkey";

alter table
  "daily_scrum"."daily_scrum_update_forms"
add
  constraint "daily_scrum_daily_scrum_update_forms_org_id_fkey" FOREIGN KEY (workspace_id) REFERENCES daily_scrum.workspaces(id) ON UPDATE RESTRICT ON DELETE RESTRICT not valid;

alter table
  "daily_scrum"."daily_scrum_update_forms" validate constraint "daily_scrum_daily_scrum_update_forms_org_id_fkey";

alter table
  "daily_scrum"."daily_scrum_update_questions"
add
  constraint "daily_scrum_daily_scrum_update_questions_daily_scrum_update_for" FOREIGN KEY (daily_scrum_update_form_id) REFERENCES daily_scrum.daily_scrum_update_forms(id) ON UPDATE RESTRICT ON DELETE RESTRICT not valid;

alter table
  "daily_scrum"."daily_scrum_update_questions" validate constraint "daily_scrum_daily_scrum_update_questions_daily_scrum_update_for";

alter table
  "daily_scrum"."invitations"
add
  constraint "daily_scrum_invitations_org_id_fkey" FOREIGN KEY (workspace_id) REFERENCES daily_scrum.workspaces(id) ON UPDATE RESTRICT ON DELETE RESTRICT not valid;

alter table
  "daily_scrum"."invitations" validate constraint "daily_scrum_invitations_org_id_fkey";

alter table
  "daily_scrum"."invitations"
add
  constraint "invitations_code_key" UNIQUE using index "invitations_code_key";

alter table
  "daily_scrum"."members"
add
  constraint "daily_scrum_members_org_id_fkey" FOREIGN KEY (workspace_id) REFERENCES daily_scrum.workspaces(id) ON UPDATE RESTRICT ON DELETE RESTRICT not valid;

alter table
  "daily_scrum"."members" validate constraint "daily_scrum_members_org_id_fkey";

alter table
  "daily_scrum"."members"
add
  constraint "daily_scrum_members_user_id_b_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table
  "daily_scrum"."members" validate constraint "daily_scrum_members_user_id_b_fkey";

alter table
  "daily_scrum"."profiles"
add
  constraint "daily_scrum_profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON UPDATE RESTRICT ON DELETE RESTRICT not valid;

alter table
  "daily_scrum"."profiles" validate constraint "daily_scrum_profiles_id_fkey";

alter table
  "daily_scrum"."workspace_settings"
add
  constraint "daily_scrum_org_settings_org_id_fkey" FOREIGN KEY (workspace_id) REFERENCES daily_scrum.workspaces(id) ON UPDATE RESTRICT ON DELETE RESTRICT not valid;

alter table
  "daily_scrum"."workspace_settings" validate constraint "daily_scrum_org_settings_org_id_fkey";

set
  check_function_bodies = off;

CREATE
OR REPLACE FUNCTION daily_scrum.handle_before_organization_insert() RETURNS trigger LANGUAGE plpgsql AS $function$ BEGIN NEW.hash_id := extensions.id_encode(NEW.id, '', 20);

RETURN NEW;

END;

$function$;

create
or replace view "daily_scrum"."users" as
SELECT
  users.instance_id,
  users.id,
  users.aud,
  users.role,
  users.email,
  users.encrypted_password,
  users.email_confirmed_at,
  users.invited_at,
  users.confirmation_token,
  users.confirmation_sent_at,
  users.recovery_token,
  users.recovery_sent_at,
  users.email_change_token_new,
  users.email_change,
  users.email_change_sent_at,
  users.last_sign_in_at,
  users.raw_app_meta_data,
  users.raw_user_meta_data,
  users.is_super_admin,
  users.created_at,
  users.updated_at,
  users.phone,
  users.phone_confirmed_at,
  users.phone_change,
  users.phone_change_token,
  users.phone_change_sent_at,
  users.confirmed_at,
  users.email_change_token_current,
  users.email_change_confirm_status,
  users.banned_until,
  users.reauthentication_token,
  users.reauthentication_sent_at,
  users.is_sso_user,
  users.deleted_at,
  users.is_anonymous
FROM
  auth.users;

CREATE TRIGGER before_organization_insert BEFORE
INSERT
  ON daily_scrum.workspaces FOR EACH ROW EXECUTE FUNCTION daily_scrum.handle_before_organization_insert();